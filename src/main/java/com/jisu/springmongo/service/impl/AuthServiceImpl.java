package com.jisu.springmongo.service.impl;import com.jisu.springmongo.dto.request.LoginRequest;import com.jisu.springmongo.dto.request.UserRequestDTO;import com.jisu.springmongo.dto.response.UserResponseDTO;import com.jisu.springmongo.enums.Role;import com.jisu.springmongo.model.UserEO;import com.jisu.springmongo.repo.UserRepo;import com.jisu.springmongo.security.JwtHelper;import com.jisu.springmongo.service.AuthService;import lombok.RequiredArgsConstructor;import org.modelmapper.ModelMapper;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import java.util.HashMap;import java.util.Map;@Service@RequiredArgsConstructorpublic class AuthServiceImpl implements AuthService {    private final AuthenticationManager authenticationManager;    private final UserDetailsService userDetailsService;    private final JwtHelper jwtHelper;    private final ModelMapper modelMapper;    private final PasswordEncoder passwordEncoder;    private final UserRepo userRepo;    @Override    public Map login(LoginRequest loginRequest) {        doAuthenticate(loginRequest.getUserName(), loginRequest.getPassword());        UserDetails userDetails = userDetailsService.loadUserByUsername(loginRequest.getUserName());        String token = this.jwtHelper.generateToken(userDetails);        Map response = new HashMap();        response.put("TOKEN", token);        return response;    }    @Override    public UserResponseDTO registerUser(UserRequestDTO user) {        UserEO goingTosaved = modelMapper.map(user, UserEO.class);        goingTosaved.setRole(Role.USER);        goingTosaved.setPassword(passwordEncoder.encode(goingTosaved.getPassword()));        UserEO saved = userRepo.save(goingTosaved);        UserResponseDTO response = modelMapper.map(saved, UserResponseDTO.class);        return response;    }    private void doAuthenticate(String email, String password) {        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(email, password);        try {            authenticationManager.authenticate(authentication);        } catch (BadCredentialsException e) {            throw new BadCredentialsException(" Invalid Username or Password !!");        }    }}