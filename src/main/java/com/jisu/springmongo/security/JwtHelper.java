package com.jisu.springmongo.security;import com.jisu.springmongo.constants.AppConstants;import org.springframework.stereotype.Component;import io.jsonwebtoken.*;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.core.userdetails.UserDetails;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.function.Function;@Componentpublic class JwtHelper {    public static final long JWT_TOKEN_VALIDITY = AppConstants.JWT_EXPIRATION_TIME;    @Value("${user.jwt.secret}")    private String secret;    public String getUsernameFromToken(String token) {        return getClaimFromToken(token, Claims::getSubject);    }    public Date getExpirationDateFromToken(String token) {        return getClaimFromToken(token, Claims::getExpiration);    }    public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {        final Claims claims = getAllClaimsFromToken(token);        return claimsResolver.apply(claims);    }    private Claims getAllClaimsFromToken(String token) {        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();    }    public Boolean isTokenExpired(String token) {        final Date expiration = getExpirationDateFromToken(token);        return expiration.before(new Date());    }    public String generateToken(UserDetails userDetails) {        Map<String, Object> claims = new HashMap<>();        claims.put("roles", userDetails.getAuthorities());        return doGenerateToken(claims, userDetails.getUsername());    }    private String doGenerateToken(Map<String, Object> claims, String subject) {        return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))                .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))                .signWith(SignatureAlgorithm.HS512, secret).compact();    }    public Boolean validateToken(String token, UserDetails userDetails) {        final String username = getUsernameFromToken(token);        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));    }    public String getRoleFromToken(String token) {        Jws<Claims> claims = Jwts.parserBuilder()                .setSigningKey(secret)                .build()                .parseClaimsJws(token);        Object rolesObject = claims.getBody().get("roles");        if (rolesObject instanceof List<?>) {            List<String> roles = (List<String>) rolesObject;            if (!roles.isEmpty()) {                return roles.get(0);            }        } else if (rolesObject instanceof String) {            return (String) rolesObject;        }        return "USER";    }}