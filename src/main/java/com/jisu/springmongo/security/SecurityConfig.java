package com.jisu.springmongo.security;import com.jisu.springmongo.config.UrlConfig;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configurationpublic class SecurityConfig {    @Autowired    private  JwtAuthenticationEntryPoint point;    @Autowired    private  JwtAuthenticationFilter filter;    @Autowired    private  UserDetailsService userDetailsService;    @Autowired    private  PasswordEncoder passwordencoder;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http.csrf(csrf -> csrf.disable())                .authorizeRequests(authorizeRequests -> authorizeRequests                        .requestMatchers(UrlConfig.PUBLIC_URL).permitAll()                        .requestMatchers(UrlConfig.PRIVATE_URL).authenticated()                        .anyRequest().authenticated()                )                .exceptionHandling(exceptionHandling -> exceptionHandling                        .authenticationEntryPoint(point)                )                .sessionManagement(sessionManagement -> sessionManagement                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)                );        http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }    @Bean    public DaoAuthenticationProvider daoAuthenticationProvider() {        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();        daoAuthenticationProvider.setUserDetailsService(userDetailsService);        daoAuthenticationProvider.setPasswordEncoder(passwordencoder);        return daoAuthenticationProvider;    }}